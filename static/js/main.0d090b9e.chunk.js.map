{"version":3,"sources":["components/SearchBox.js","components/Logo.js","components/HeaderBar.js","components/PhotoImage.js","components/Link.js","components/TextContent.js","components/Tag.js","components/PhotoTagBox.js","components/PhotoDetails.js","components/PhotoFrame.js","components/Loading.js","components/StatusMessage.js","config.js","components/Container.js","lib/helpers.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","handleChange","event","setState","searchText","target","value","handleSubmit","search","state","onSubmit","className","id","type","this","onChange","placeholder","disabled","length","React","Component","Logo","onClick","refresh","logoName","logoText","HeaderBar","PhotoImage","alt","title","src","effect","width","Link","href","url","small","text","TextContent","Fragment","Tag","tag","PhotoTagBox","tags","map","key","PhotoDetails","photo","imageURL","ownerURL","ownername","strippedText","split","PhotoFrame","Loading","color","height","StatusMessage","message","config","FLICKR_PUBLIC_BASE_URL","FLICKR_API_BASE_URL","FLICKR_FARM_BASE_URL","FLICKR_API_KEY","process","Container","collateTags","userTags","defaultTags","mandatoryTags","array","fallbackTags","console","log","unshift","Math","floor","random","lastSearch","tagString","forEach","index","formatResults","metadata","photos","photoArray","page","pages","lastPage","newPhotos","server","secret","owner","farm","description","_content","replace","push","Array","from","Set","nothingReturned","fetchSearchResults","a","perPage","fetch","json","results","preventDefault","string","formattedSearchString","newTags","slice","componentDidMount","componentDidUpdate","prevProps","prevState","window","scrollTo","sortPhotosIntoColumns","photosInColumns","col1","col2","col3","col4","iterator","generateStatusMessage","class","location","reload","pageStart","loadMore","hasMore","loader","initialLoad","App","aprop","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d090b9e.chunk.js","sourcesContent":["import React from 'react'\n\nclass SearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchText: '',\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ searchText: event.target.value });\n    }\n\n    handleSubmit = (event) => {\n        this.props.search(event, this.state.searchText);\n        this.setState({ searchText: '' });\n    }\n\n    render() {\n        return (\n            <form\n                onSubmit={(event) => { this.handleSubmit(event) }}\n                className=\"form\"\n            >\n                <input\n                    id=\"search-box\"\n                    type=\"text\"\n                    value={this.state.searchText}\n                    onChange={this.handleChange}\n                    placeholder={this.props.placeholder}\n                />\n                <button\n                    type=\"submit\"\n                    disabled={this.state.searchText.length === 0}\n                    className=\"button\" >Search\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default SearchBox","import React from 'react';\n\nfunction Logo(props) {\n    return (\n        <h1><span className=\"highlight\" onClick={props.refresh}>{`${props.logoName}`} </span>{`${props.logoText}`}</h1>\n    );\n}\n\nexport default Logo","import React from 'react';\nimport SearchBox from './SearchBox';\nimport Logo from './Logo';\n\nfunction HeaderBar(props) {\n    return (\n        <section id=\"header-bar\">\n            <Logo\n                logoName=\"flickr\"\n                logoText=\"Photo Stream\"\n                refresh={props.refresh}\n            />\n            <SearchBox\n                search={props.search}\n                placeholder=\"Enter some tags to search for\"\n            />\n        </section>\n\n    );\n}\n\nexport default HeaderBar;","import React from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nfunction PhotoImage(props) {\n    return (\n        <LazyLoadImage\n            alt={props.title}\n            title={props.title}\n            src={props.src}\n            effect=\"opacity\"\n            width=\"100%\"\n        />\n    );\n}\n\nexport default PhotoImage","import React from 'react';\n\nfunction Link(props) {\n    return (\n        <section>\n            <a\n                href={props.url}\n                className={`link ${props.small ? 'small' : ''}`}\n            >\n                {props.text}\n            </a>\n        </section>\n    );\n}\n\nexport default Link","import React from 'react';\n\nfunction TextContent(props) {\n    return (\n        <React.Fragment>\n            <section className=\"text-content\">\n                {props.text}\n            </section>\n            <section className=\"fade-end\" />\n        </React.Fragment>\n    );\n}\n\nexport default TextContent","import React from 'react';\n\nfunction Tag({ tag }) {\n    return (\n        <section className=\"tag\">\n            {tag}\n        </section>\n    );\n}\n\nexport default Tag","import React from 'react';\nimport Tag from './Tag';\n\nfunction PhotoTagBox({ tags }) {\n    return (\n        <React.Fragment>\n            <section className=\"photo-tag-box\">\n                {tags.map((tag) => {\n                    return <Tag tag={tag} key={tag} />;\n                })}\n            </section>\n            <section className=\"fade-end tag-fade\" />\n        </React.Fragment>\n    );\n}\n\nexport default PhotoTagBox;","import React from 'react';\nimport Link from './Link';\nimport TextContent from './TextContent';\nimport PhotoTagBox from './PhotoTagBox';\n\nfunction PhotoDetails({ photo }) {\n    return (\n        <section className=\"photo-details\">\n            <Link url={photo.imageURL} text={photo.title || \"Untitled\"} />\n            <Link url={photo.ownerURL} text={photo.ownername} small />\n            <TextContent\n                text={photo.strippedText}\n            />\n            <br />\n            <PhotoTagBox tags={photo.tags.split(\" \")} />\n        </section>\n    );\n\n}\n\nexport default PhotoDetails","import React from 'react';\nimport PhotoImage from './PhotoImage';\nimport PhotoDetails from './PhotoDetails';\n\nfunction PhotoFrame(props) {\n    return (\n        <section className=\"photo-frame\">\n            <PhotoImage\n                src={props.photo.src}\n                title={props.photo.title}\n            />\n            <PhotoDetails photo={props.photo} />\n        </section>\n    );\n}\n\nexport default PhotoFrame;","import React from 'react';\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nfunction Loading(props) {\n    return (\n        <section className=\"loading\">\n            <Loader\n                type=\"Puff\"\n                color=\"#fc167a\"\n                height={24}\n                width={24}\n            />\n        </section>\n    );\n}\n\nexport default Loading","import React from 'react';\n\nfunction StatusMessage({ message }) {\n    return <h1 className=\"status-message\">{message}</h1>;\n}\n\nexport default StatusMessage","const config = {\n    FLICKR_PUBLIC_BASE_URL: 'https://www.flickr.com',\n    FLICKR_API_BASE_URL: 'https://api.flickr.com',\n    FLICKR_FARM_BASE_URL: 'https://farm',\n    FLICKR_API_KEY: process.env.REACT_APP_FLICKR_API_KEY,\n}\n\nexport default config;\n","import React from 'react';\nimport HeaderBar from './HeaderBar';\nimport PhotoFrame from './PhotoFrame';\nimport Loading from './Loading';\nimport StatusMessage from './StatusMessage';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { stripHTMLTags, stripNonAlphaNumericsAndWhiteSpace, getRandomElementFromArray } from '../lib/helpers';\nimport config from '../config';\n\nclass Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastPage: false,\n            perPage: 50,\n            photos: [],\n            userTags: [],\n            defaultTags: ['landscapes', 'nature', 'trees', 'cats', 'dogs', 'gardens', 'boats', 'cars'],\n            mandatoryTags: ['safe'],\n            lastSearch: '',\n            nothingReturned: false,\n        };\n    }\n\n    collateTags = (userTags, defaultTags, mandatoryTags) => {\n        let tags;\n        const fallbackTags = [...mandatoryTags];\n        if (userTags && userTags.length > 0) {\n            console.log('userTags', userTags)\n            console.log('mand', mandatoryTags);\n            tags = [...userTags, ...mandatoryTags];\n        } else {\n            fallbackTags.unshift(getRandomElementFromArray(defaultTags));\n            tags = fallbackTags;\n            this.setState({ lastSearch: tags[0] });\n        }\n        console.log('tags', tags);\n        let tagString = '';\n        tags.forEach((tag, index) => {\n            if (index === tags.length - 1) {\n                tagString += `${tag}`\n            } else {\n                tagString += `${tag},`\n            }\n        });\n        console.log(tagString);\n        return tagString;\n    }\n\n    formatResults = ({ photos: metadata, photos: { photo: photoArray } }) => {\n        if (metadata && photoArray) {\n\n            if (metadata.page && metadata.pages && metadata.page === metadata.pages) {\n                this.setState({ lastPage: true });\n            } else {\n                this.setState({ lastPage: false });\n            }\n\n            const newPhotos = [];\n\n            for (const photo of photoArray) {\n                const { server, id, secret, owner } = photo;\n\n                /* -----------------------------------------------------------------------------\n                I have no idea why the below should be necessary, but it seems that when\n                a photo lives on farm 1, Flickr's API incorrectly returns it as farm 0.\n                I've found forum discussions describing this issue as far back as 4 years ago.*/\n                let { farm } = photo;\n                if (farm === 0) {\n                    farm = 1;\n                }\n                /* ----------------------------------------------------------------------------*/\n\n                photo.src = `${config.FLICKR_FARM_BASE_URL}${farm}.staticflickr.com/${server}/${id}_${secret}_q.jpg`\n                photo.imageURL = `${config.FLICKR_PUBLIC_BASE_URL}/photos/${owner}/${id}`;\n                photo.ownerURL = `${config.FLICKR_PUBLIC_BASE_URL}/people/${owner}/`;\n                photo.strippedText = stripHTMLTags(photo.description._content) || \"This photo doesn't have a description.\";\n                newPhotos.push(photo);\n            }\n            this.setState({ photos: Array.from(new Set([...this.state.photos, ...newPhotos])) });\n\n            if (newPhotos && newPhotos.length > 0) {\n                this.setState({ nothingReturned: false });\n            } else {\n                this.setState({ nothingReturned: true });\n            }\n        }\n    }\n\n    fetchSearchResults = async (page = 1) => {\n        const url = `${config.FLICKR_API_BASE_URL}/services/rest/?method=flickr.photos.search` +\n            `&api_key=${config.FLICKR_API_KEY}` +\n            `&per_page=${this.state.perPage}` +\n            `&format=json` +\n            `&tags=${this.collateTags(this.state.userTags, this.state.defaultTags, this.state.mandatoryTags)}` +\n            `&tag_mode=all` +\n            `&page=${page}` +\n            `&extras=description,tags,owner_name` +\n            `&safe_search=1` + // 1 = safe search enabled (not good enough though, also using a mandatory safe tag)\n            `&nojsoncallback=1`;\n        console.log(url);\n        const results = await (await fetch(url)).json();\n        this.formatResults(results);\n    }\n\n    search = (event, searchText) => {\n        event.preventDefault();\n\n        const formattedSearchString = stripNonAlphaNumericsAndWhiteSpace(searchText);\n        this.setState({ lastSearch: formattedSearchString.replace(/ /g, ', ') })\n        const newTags = Array.from((new Set(formattedSearchString.split(' ').slice(0, 20)))); // Flickr's search API can't handle more than 20 tags\n        this.setState({ userTags: newTags });\n    }\n\n    componentDidMount = async () => {\n        await this.fetchSearchResults();\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.state.userTags !== prevState.userTags) {\n            this.setState({ photos: [] });\n            await this.fetchSearchResults();\n            window.scrollTo(0, 0);\n        }\n    }\n\n    sortPhotosIntoColumns = (photos) => {\n        let photosInColumns = {\n            col1: [],\n            col2: [],\n            col3: [],\n            col4: [],\n        }\n        let iterator = 1;\n        photos.forEach((photo) => {\n            photosInColumns[`col${iterator}`].push(photo);\n            if (iterator < 4) {\n                iterator++;\n            } else {\n                iterator = 1;\n            }\n        });\n        return photosInColumns;\n    }\n\n    generateStatusMessage = () => {\n        if (this.state.nothingReturned) {\n            return 'Nothing to show here...'\n        }\n\n        const userHasEnteredTags = this.state.userTags && this.state.userTags.length > 0;\n        if (userHasEnteredTags) {\n        return <p>Here are some <span class=\"stand-out\">{this.state.lastSearch}</span> pictures like you asked for...</p>\n        } else {\n            return <p>You've not searched for any tags yet, so here are some nice pictures of <span class=\"stand-out\">{this.state.lastSearch}</span> for you to look at...</p>\n        }\n    }\n\n    refresh = () => {\n        window.location.reload(false);\n    }\n\n    render() {\n        const photosInColumns = this.sortPhotosIntoColumns(this.state.photos);\n\n        return (\n            <section className=\"wrapper\">\n                <HeaderBar\n                    search={this.search}\n                    refresh={this.refresh}\n                />\n                <section className=\"pic-list\">\n                    <StatusMessage message={this.generateStatusMessage()} />\n                    <InfiniteScroll\n                        pageStart={1}\n                        loadMore={this.fetchSearchResults}\n                        hasMore={!this.state.lastPage}\n                        loader={<Loading />}\n                        initialLoad={false}\n                    >\n\n                        <section className=\"row\">\n                            <section className=\"column\">\n                                {photosInColumns.col1.map(photo => <PhotoFrame photo={photo} key={photo.id} />)}\n                            </section>\n                            <section className=\"column\">\n                                {photosInColumns.col2.map(photo => <PhotoFrame photo={photo} key={photo.id} />)}\n                            </section>\n                            <section className=\"column\">\n                                {photosInColumns.col3.map(photo => <PhotoFrame photo={photo} key={photo.id} />)}\n                            </section>\n                            <section className=\"column\">\n                                {photosInColumns.col4.map(photo => <PhotoFrame photo={photo} key={photo.id} />)}\n                            </section>\n                        </section>\n                    </InfiniteScroll>\n                </section>\n            </section>\n        );\n    }\n}\n\nexport default Container\n","export function stripHTMLTags(string) {\n    return string.replace(/(<([^>]+)>)/ig, '');\n}\n\nexport function stripNonAlphaNumericsAndWhiteSpace(string) {\n    console.log(string);\n    console.log(typeof string);\n    /* Strip out all characters which aren't alphanumeric or whitespace\n    a-zA-Z =  matches all the letters\n    \\d = numeric\n    \\s = whitespace\n    ^ = negates them all */\n    return string.replace(/[^a-zA-Z\\d\\s]/g, ' ');\n}\n\nexport function getRandomElementFromArray(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}","import React from 'react';\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container aprop=\"hello\"/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}